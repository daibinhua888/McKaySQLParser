//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\McKay\Documents\Visual Studio 2012\Projects\McKaySQLParser\McKaySQLParser\Grammars\SelectSQL.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace McKaySQLParser.Grammars {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class SelectSQLParser : Parser {
	public const int
		A=1, B=2, C=3, D=4, E=5, F=6, G=7, H=8, I=9, J=10, K=11, L=12, M=13, N=14, 
		O=15, P=16, Q=17, R=18, S=19, T=20, U=21, V=22, W=23, X=24, Y=25, Z=26, 
		COMMA=27, STAR=28, L_BRACK=29, R_BRACK=30, DOT=31, STRING=32, NUMBER=33, 
		UNDER_LINE=34, OPS_EQ=35, OPS_LT=36, OPS_LET=37, OPS_GT=38, OPS_GET=39, 
		OPS_NEQ=40, SELECT=41, FROM=42, WHERE=43, ORDERBY=44, AS=45, ORDERBY_ASC=46, 
		ORDERBY_DESC=47, AND_OR=48, NOLOCK=49, READPAST=50, FUNCTIONS_PREFIX=51, 
		COLUMN_PREDICT=52;
	public const int
		RULE_compileUnit = 0, RULE_sql = 1, RULE_select = 2, RULE_columns = 3, 
		RULE_column = 4, RULE_columnExpression = 5, RULE_functionableColumn = 6, 
		RULE_columnName = 7, RULE_from = 8, RULE_tableLockType = 9, RULE_table = 10, 
		RULE_where = 11, RULE_orderby = 12, RULE_expression = 13, RULE_identity = 14, 
		RULE_character = 15, RULE_number = 16, RULE_string = 17, RULE_orderByStmts = 18, 
		RULE_orderByStmt = 19, RULE_orderByDirection = 20, RULE_whereStmts = 21, 
		RULE_whereStmt = 22, RULE_whereCondition = 23, RULE_operators = 24, RULE_comparableValue = 25;
	public static readonly string[] ruleNames = {
		"compileUnit", "sql", "select", "columns", "column", "columnExpression", 
		"functionableColumn", "columnName", "from", "tableLockType", "table", 
		"where", "orderby", "expression", "identity", "character", "number", "string", 
		"orderByStmts", "orderByStmt", "orderByDirection", "whereStmts", "whereStmt", 
		"whereCondition", "operators", "comparableValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "','", "'*'", "'('", "')'", "'.'", null, null, "'_'", 
		"'='", "'<'", "'<='", "'>'", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", 
		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "COMMA", 
		"STAR", "L_BRACK", "R_BRACK", "DOT", "STRING", "NUMBER", "UNDER_LINE", 
		"OPS_EQ", "OPS_LT", "OPS_LET", "OPS_GT", "OPS_GET", "OPS_NEQ", "SELECT", 
		"FROM", "WHERE", "ORDERBY", "AS", "ORDERBY_ASC", "ORDERBY_DESC", "AND_OR", 
		"NOLOCK", "READPAST", "FUNCTIONS_PREFIX", "COLUMN_PREDICT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SelectSQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SelectSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public SqlContext sql() {
			return GetRuleContext<SqlContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; sql();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlContext : ParserRuleContext {
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		public SqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterSql(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitSql(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlContext sql() {
		SqlContext _localctx = new SqlContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_sql);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; select();
			State = 55; from();
			State = 57;
			_la = _input.La(1);
			if (_la==WHERE) {
				{
				State = 56; where();
				}
			}

			State = 60;
			_la = _input.La(1);
			if (_la==ORDERBY) {
				{
				State = 59; orderby();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(SelectSQLParser.SELECT, 0); }
		public ColumnsContext columns() {
			return GetRuleContext<ColumnsContext>(0);
		}
		public ITerminalNode COLUMN_PREDICT() { return GetToken(SelectSQLParser.COLUMN_PREDICT, 0); }
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterSelect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitSelect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(SELECT);
			State = 64;
			_la = _input.La(1);
			if (_la==COLUMN_PREDICT) {
				{
				State = 63; Match(COLUMN_PREDICT);
				}
			}

			State = 66; columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsContext : ParserRuleContext {
		public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SelectSQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SelectSQLParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columns; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterColumns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitColumns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsContext columns() {
		ColumnsContext _localctx = new ColumnsContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_columns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; column();
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 69; Match(COMMA);
				State = 70; column();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		public ColumnExpressionContext columnExpression() {
			return GetRuleContext<ColumnExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(SelectSQLParser.AS, 0); }
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; columnExpression();
			State = 79;
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 77; Match(AS);
				State = 78; columnName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnExpressionContext : ParserRuleContext {
		public FunctionableColumnContext functionableColumn() {
			return GetRuleContext<FunctionableColumnContext>(0);
		}
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ColumnExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterColumnExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitColumnExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnExpressionContext columnExpression() {
		ColumnExpressionContext _localctx = new ColumnExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_columnExpression);
		try {
			State = 83;
			switch (_input.La(1)) {
			case FUNCTIONS_PREFIX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; functionableColumn();
				}
				break;
			case A:
			case B:
			case C:
			case D:
			case E:
			case F:
			case G:
			case H:
			case I:
			case J:
			case K:
			case L:
			case M:
			case N:
			case O:
			case P:
			case Q:
			case R:
			case S:
			case T:
			case U:
			case V:
			case W:
			case X:
			case Y:
			case Z:
			case STAR:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; columnName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionableColumnContext : ParserRuleContext {
		public ITerminalNode FUNCTIONS_PREFIX() { return GetToken(SelectSQLParser.FUNCTIONS_PREFIX, 0); }
		public ITerminalNode L_BRACK() { return GetToken(SelectSQLParser.L_BRACK, 0); }
		public ITerminalNode R_BRACK() { return GetToken(SelectSQLParser.R_BRACK, 0); }
		public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(SelectSQLParser.NUMBER, 0); }
		public ITerminalNode STAR() { return GetToken(SelectSQLParser.STAR, 0); }
		public FunctionableColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionableColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterFunctionableColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitFunctionableColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionableColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionableColumnContext functionableColumn() {
		FunctionableColumnContext _localctx = new FunctionableColumnContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_functionableColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(FUNCTIONS_PREFIX);
			State = 86; Match(L_BRACK);
			State = 90;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 87; columnName();
				}
				break;

			case 2:
				{
				State = 88; Match(NUMBER);
				}
				break;

			case 3:
				{
				State = 89; Match(STAR);
				}
				break;
			}
			State = 92; Match(R_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(SelectSQLParser.STAR, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_columnName);
		try {
			State = 97;
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case F:
			case G:
			case H:
			case I:
			case J:
			case K:
			case L:
			case M:
			case N:
			case O:
			case P:
			case Q:
			case R:
			case S:
			case T:
			case U:
			case V:
			case W:
			case X:
			case Y:
			case Z:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; identity();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; number();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(SelectSQLParser.FROM, 0); }
		public TableContext table() {
			return GetRuleContext<TableContext>(0);
		}
		public TableLockTypeContext tableLockType() {
			return GetRuleContext<TableLockTypeContext>(0);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitFrom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(FROM);
			State = 100; table();
			State = 102;
			_la = _input.La(1);
			if (_la==L_BRACK) {
				{
				State = 101; tableLockType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableLockTypeContext : ParserRuleContext {
		public ITerminalNode L_BRACK() { return GetToken(SelectSQLParser.L_BRACK, 0); }
		public ITerminalNode NOLOCK() { return GetToken(SelectSQLParser.NOLOCK, 0); }
		public ITerminalNode R_BRACK() { return GetToken(SelectSQLParser.R_BRACK, 0); }
		public ITerminalNode READPAST() { return GetToken(SelectSQLParser.READPAST, 0); }
		public TableLockTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableLockType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterTableLockType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitTableLockType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableLockType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableLockTypeContext tableLockType() {
		TableLockTypeContext _localctx = new TableLockTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_tableLockType);
		try {
			State = 110;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(L_BRACK);
				State = 105; Match(NOLOCK);
				State = 106; Match(R_BRACK);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; Match(L_BRACK);
				State = 108; Match(READPAST);
				State = 109; Match(R_BRACK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; identity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(SelectSQLParser.WHERE, 0); }
		public WhereStmtsContext whereStmts() {
			return GetRuleContext<WhereStmtsContext>(0);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_where);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(WHERE);
			State = 115; whereStmts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(SelectSQLParser.ORDERBY, 0); }
		public OrderByStmtsContext orderByStmts() {
			return GetRuleContext<OrderByStmtsContext>(0);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterOrderby(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitOrderby(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_orderby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(ORDERBY);
			State = 118; orderByStmts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; identity();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentityContext : ParserRuleContext {
		public CharacterContext[] character() {
			return GetRuleContexts<CharacterContext>();
		}
		public CharacterContext character(int i) {
			return GetRuleContext<CharacterContext>(i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(SelectSQLParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(SelectSQLParser.NUMBER, i);
		}
		public ITerminalNode[] UNDER_LINE() { return GetTokens(SelectSQLParser.UNDER_LINE); }
		public ITerminalNode UNDER_LINE(int i) {
			return GetToken(SelectSQLParser.UNDER_LINE, i);
		}
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterIdentity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitIdentity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_identity);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; character();
			State = 128;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 126;
					switch (_input.La(1)) {
					case A:
					case B:
					case C:
					case D:
					case E:
					case F:
					case G:
					case H:
					case I:
					case J:
					case K:
					case L:
					case M:
					case N:
					case O:
					case P:
					case Q:
					case R:
					case S:
					case T:
					case U:
					case V:
					case W:
					case X:
					case Y:
					case Z:
						{
						State = 123; character();
						}
						break;
					case NUMBER:
						{
						State = 124; Match(NUMBER);
						}
						break;
					case UNDER_LINE:
						{
						State = 125; Match(UNDER_LINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 130;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		public ITerminalNode A() { return GetToken(SelectSQLParser.A, 0); }
		public ITerminalNode B() { return GetToken(SelectSQLParser.B, 0); }
		public ITerminalNode C() { return GetToken(SelectSQLParser.C, 0); }
		public ITerminalNode D() { return GetToken(SelectSQLParser.D, 0); }
		public ITerminalNode E() { return GetToken(SelectSQLParser.E, 0); }
		public ITerminalNode F() { return GetToken(SelectSQLParser.F, 0); }
		public ITerminalNode G() { return GetToken(SelectSQLParser.G, 0); }
		public ITerminalNode H() { return GetToken(SelectSQLParser.H, 0); }
		public ITerminalNode I() { return GetToken(SelectSQLParser.I, 0); }
		public ITerminalNode J() { return GetToken(SelectSQLParser.J, 0); }
		public ITerminalNode K() { return GetToken(SelectSQLParser.K, 0); }
		public ITerminalNode L() { return GetToken(SelectSQLParser.L, 0); }
		public ITerminalNode M() { return GetToken(SelectSQLParser.M, 0); }
		public ITerminalNode N() { return GetToken(SelectSQLParser.N, 0); }
		public ITerminalNode O() { return GetToken(SelectSQLParser.O, 0); }
		public ITerminalNode P() { return GetToken(SelectSQLParser.P, 0); }
		public ITerminalNode Q() { return GetToken(SelectSQLParser.Q, 0); }
		public ITerminalNode R() { return GetToken(SelectSQLParser.R, 0); }
		public ITerminalNode S() { return GetToken(SelectSQLParser.S, 0); }
		public ITerminalNode T() { return GetToken(SelectSQLParser.T, 0); }
		public ITerminalNode U() { return GetToken(SelectSQLParser.U, 0); }
		public ITerminalNode V() { return GetToken(SelectSQLParser.V, 0); }
		public ITerminalNode W() { return GetToken(SelectSQLParser.W, 0); }
		public ITerminalNode X() { return GetToken(SelectSQLParser.X, 0); }
		public ITerminalNode Y() { return GetToken(SelectSQLParser.Y, 0); }
		public ITerminalNode Z() { return GetToken(SelectSQLParser.Z, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_character);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A) | (1L << B) | (1L << C) | (1L << D) | (1L << E) | (1L << F) | (1L << G) | (1L << H) | (1L << I) | (1L << J) | (1L << K) | (1L << L) | (1L << M) | (1L << N) | (1L << O) | (1L << P) | (1L << Q) | (1L << R) | (1L << S) | (1L << T) | (1L << U) | (1L << V) | (1L << W) | (1L << X) | (1L << Y) | (1L << Z))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(SelectSQLParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(SelectSQLParser.NUMBER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SelectSQLParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SelectSQLParser.DOT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_number);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(NUMBER);
			State = 137;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 134;
					_la = _input.La(1);
					if ( !(_la==DOT || _la==NUMBER) ) {
					_errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					}
					} 
				}
				State = 139;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SelectSQLParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByStmtsContext : ParserRuleContext {
		public OrderByStmtContext[] orderByStmt() {
			return GetRuleContexts<OrderByStmtContext>();
		}
		public OrderByStmtContext orderByStmt(int i) {
			return GetRuleContext<OrderByStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SelectSQLParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SelectSQLParser.COMMA, i);
		}
		public OrderByStmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByStmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterOrderByStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitOrderByStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByStmtsContext orderByStmts() {
		OrderByStmtsContext _localctx = new OrderByStmtsContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_orderByStmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; orderByStmt();
			State = 147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 143; Match(COMMA);
				State = 144; orderByStmt();
				}
				}
				State = 149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByStmtContext : ParserRuleContext {
		public ColumnExpressionContext columnExpression() {
			return GetRuleContext<ColumnExpressionContext>(0);
		}
		public OrderByDirectionContext orderByDirection() {
			return GetRuleContext<OrderByDirectionContext>(0);
		}
		public OrderByStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterOrderByStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitOrderByStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByStmtContext orderByStmt() {
		OrderByStmtContext _localctx = new OrderByStmtContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_orderByStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; columnExpression();
			State = 152;
			_la = _input.La(1);
			if (_la==ORDERBY_ASC || _la==ORDERBY_DESC) {
				{
				State = 151; orderByDirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByDirectionContext : ParserRuleContext {
		public ITerminalNode ORDERBY_ASC() { return GetToken(SelectSQLParser.ORDERBY_ASC, 0); }
		public ITerminalNode ORDERBY_DESC() { return GetToken(SelectSQLParser.ORDERBY_DESC, 0); }
		public OrderByDirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByDirection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterOrderByDirection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitOrderByDirection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByDirectionContext orderByDirection() {
		OrderByDirectionContext _localctx = new OrderByDirectionContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_orderByDirection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = _input.La(1);
			if ( !(_la==ORDERBY_ASC || _la==ORDERBY_DESC) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereStmtsContext : ParserRuleContext {
		public WhereStmtContext whereStmt() {
			return GetRuleContext<WhereStmtContext>(0);
		}
		public WhereStmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereStmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterWhereStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitWhereStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereStmtsContext whereStmts() {
		WhereStmtsContext _localctx = new WhereStmtsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_whereStmts);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; whereStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereStmtContext : ParserRuleContext {
		public WhereStmtContext[] whereStmt() {
			return GetRuleContexts<WhereStmtContext>();
		}
		public WhereStmtContext whereStmt(int i) {
			return GetRuleContext<WhereStmtContext>(i);
		}
		public ITerminalNode AND_OR() { return GetToken(SelectSQLParser.AND_OR, 0); }
		public WhereConditionContext whereCondition() {
			return GetRuleContext<WhereConditionContext>(0);
		}
		public ITerminalNode L_BRACK() { return GetToken(SelectSQLParser.L_BRACK, 0); }
		public ITerminalNode R_BRACK() { return GetToken(SelectSQLParser.R_BRACK, 0); }
		public WhereStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterWhereStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitWhereStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereStmtContext whereStmt() {
		return whereStmt(0);
	}

	private WhereStmtContext whereStmt(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		WhereStmtContext _localctx = new WhereStmtContext(_ctx, _parentState);
		WhereStmtContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_whereStmt, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			switch (_input.La(1)) {
			case A:
			case B:
			case C:
			case D:
			case E:
			case F:
			case G:
			case H:
			case I:
			case J:
			case K:
			case L:
			case M:
			case N:
			case O:
			case P:
			case Q:
			case R:
			case S:
			case T:
			case U:
			case V:
			case W:
			case X:
			case Y:
			case Z:
			case STAR:
			case STRING:
			case NUMBER:
			case FUNCTIONS_PREFIX:
				{
				State = 159; whereCondition();
				}
				break;
			case L_BRACK:
				{
				State = 160; Match(L_BRACK);
				State = 161; whereStmt(0);
				State = 162; Match(R_BRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 171;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WhereStmtContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_whereStmt);
					State = 166;
					if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
					State = 167; Match(AND_OR);
					State = 168; whereStmt(4);
					}
					} 
				}
				State = 173;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class WhereConditionContext : ParserRuleContext {
		public ComparableValueContext[] comparableValue() {
			return GetRuleContexts<ComparableValueContext>();
		}
		public ComparableValueContext comparableValue(int i) {
			return GetRuleContext<ComparableValueContext>(i);
		}
		public OperatorsContext operators() {
			return GetRuleContext<OperatorsContext>(0);
		}
		public WhereConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterWhereCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitWhereCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereConditionContext whereCondition() {
		WhereConditionContext _localctx = new WhereConditionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_whereCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; comparableValue();
			State = 175; operators();
			State = 176; comparableValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorsContext : ParserRuleContext {
		public ITerminalNode OPS_EQ() { return GetToken(SelectSQLParser.OPS_EQ, 0); }
		public ITerminalNode OPS_LT() { return GetToken(SelectSQLParser.OPS_LT, 0); }
		public ITerminalNode OPS_LET() { return GetToken(SelectSQLParser.OPS_LET, 0); }
		public ITerminalNode OPS_GT() { return GetToken(SelectSQLParser.OPS_GT, 0); }
		public ITerminalNode OPS_GET() { return GetToken(SelectSQLParser.OPS_GET, 0); }
		public ITerminalNode OPS_NEQ() { return GetToken(SelectSQLParser.OPS_NEQ, 0); }
		public OperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorsContext operators() {
		OperatorsContext _localctx = new OperatorsContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_operators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPS_EQ) | (1L << OPS_LT) | (1L << OPS_LET) | (1L << OPS_GT) | (1L << OPS_GET) | (1L << OPS_NEQ))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparableValueContext : ParserRuleContext {
		public ColumnExpressionContext columnExpression() {
			return GetRuleContext<ColumnExpressionContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ComparableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparableValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.EnterComparableValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISelectSQLListener typedListener = listener as ISelectSQLListener;
			if (typedListener != null) typedListener.ExitComparableValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelectSQLVisitor<TResult> typedVisitor = visitor as ISelectSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparableValueContext comparableValue() {
		ComparableValueContext _localctx = new ComparableValueContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_comparableValue);
		try {
			State = 183;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; columnExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181; number();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182; @string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return whereStmt_sempred((WhereStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool whereStmt_sempred(WhereStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x36\xBC\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3<\n\x3\x3\x3\x5\x3?\n\x3\x3"+
		"\x4\x3\x4\x5\x4\x43\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\a\x5J\n\x5\f\x5"+
		"\xE\x5M\v\x5\x3\x6\x3\x6\x3\x6\x5\x6R\n\x6\x3\a\x3\a\x5\aV\n\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x5\b]\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x5\t\x64\n\t\x3\n"+
		"\x3\n\x3\n\x5\ni\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vq\n\v\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\a\x10\x81\n\x10\f\x10\xE\x10\x84\v\x10\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\a\x12\x8A\n\x12\f\x12\xE\x12\x8D\v\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\a\x14\x94\n\x14\f\x14\xE\x14\x97\v\x14\x3\x15\x3\x15\x5\x15\x9B\n"+
		"\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x5\x18\xA7\n\x18\x3\x18\x3\x18\x3\x18\a\x18\xAC\n\x18\f\x18\xE\x18"+
		"\xAF\v\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\xBA\n\x1B\x3\x1B\x2\x2\x3.\x1C\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x2\x6\x3\x2\x3\x1C"+
		"\x4\x2!!##\x3\x2\x30\x31\x3\x2%*\xB7\x2\x36\x3\x2\x2\x2\x4\x38\x3\x2\x2"+
		"\x2\x6@\x3\x2\x2\x2\b\x46\x3\x2\x2\x2\nN\x3\x2\x2\x2\fU\x3\x2\x2\x2\xE"+
		"W\x3\x2\x2\x2\x10\x63\x3\x2\x2\x2\x12\x65\x3\x2\x2\x2\x14p\x3\x2\x2\x2"+
		"\x16r\x3\x2\x2\x2\x18t\x3\x2\x2\x2\x1Aw\x3\x2\x2\x2\x1Cz\x3\x2\x2\x2\x1E"+
		"|\x3\x2\x2\x2 \x85\x3\x2\x2\x2\"\x87\x3\x2\x2\x2$\x8E\x3\x2\x2\x2&\x90"+
		"\x3\x2\x2\x2(\x98\x3\x2\x2\x2*\x9C\x3\x2\x2\x2,\x9E\x3\x2\x2\x2.\xA6\x3"+
		"\x2\x2\x2\x30\xB0\x3\x2\x2\x2\x32\xB4\x3\x2\x2\x2\x34\xB9\x3\x2\x2\x2"+
		"\x36\x37\x5\x4\x3\x2\x37\x3\x3\x2\x2\x2\x38\x39\x5\x6\x4\x2\x39;\x5\x12"+
		"\n\x2:<\x5\x18\r\x2;:\x3\x2\x2\x2;<\x3\x2\x2\x2<>\x3\x2\x2\x2=?\x5\x1A"+
		"\xE\x2>=\x3\x2\x2\x2>?\x3\x2\x2\x2?\x5\x3\x2\x2\x2@\x42\a+\x2\x2\x41\x43"+
		"\a\x36\x2\x2\x42\x41\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x44\x3\x2\x2"+
		"\x2\x44\x45\x5\b\x5\x2\x45\a\x3\x2\x2\x2\x46K\x5\n\x6\x2GH\a\x1D\x2\x2"+
		"HJ\x5\n\x6\x2IG\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2"+
		"L\t\x3\x2\x2\x2MK\x3\x2\x2\x2NQ\x5\f\a\x2OP\a/\x2\x2PR\x5\x10\t\x2QO\x3"+
		"\x2\x2\x2QR\x3\x2\x2\x2R\v\x3\x2\x2\x2SV\x5\xE\b\x2TV\x5\x10\t\x2US\x3"+
		"\x2\x2\x2UT\x3\x2\x2\x2V\r\x3\x2\x2\x2WX\a\x35\x2\x2X\\\a\x1F\x2\x2Y]"+
		"\x5\x10\t\x2Z]\a#\x2\x2[]\a\x1E\x2\x2\\Y\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\"+
		"[\x3\x2\x2\x2]^\x3\x2\x2\x2^_\a \x2\x2_\xF\x3\x2\x2\x2`\x64\x5\x1E\x10"+
		"\x2\x61\x64\x5\"\x12\x2\x62\x64\a\x1E\x2\x2\x63`\x3\x2\x2\x2\x63\x61\x3"+
		"\x2\x2\x2\x63\x62\x3\x2\x2\x2\x64\x11\x3\x2\x2\x2\x65\x66\a,\x2\x2\x66"+
		"h\x5\x16\f\x2gi\x5\x14\v\x2hg\x3\x2\x2\x2hi\x3\x2\x2\x2i\x13\x3\x2\x2"+
		"\x2jk\a\x1F\x2\x2kl\a\x33\x2\x2lq\a \x2\x2mn\a\x1F\x2\x2no\a\x34\x2\x2"+
		"oq\a \x2\x2pj\x3\x2\x2\x2pm\x3\x2\x2\x2q\x15\x3\x2\x2\x2rs\x5\x1E\x10"+
		"\x2s\x17\x3\x2\x2\x2tu\a-\x2\x2uv\x5,\x17\x2v\x19\x3\x2\x2\x2wx\a.\x2"+
		"\x2xy\x5&\x14\x2y\x1B\x3\x2\x2\x2z{\x5\x1E\x10\x2{\x1D\x3\x2\x2\x2|\x82"+
		"\x5 \x11\x2}\x81\x5 \x11\x2~\x81\a#\x2\x2\x7F\x81\a$\x2\x2\x80}\x3\x2"+
		"\x2\x2\x80~\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80"+
		"\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x1F\x3\x2\x2\x2\x84\x82\x3\x2\x2"+
		"\x2\x85\x86\t\x2\x2\x2\x86!\x3\x2\x2\x2\x87\x8B\a#\x2\x2\x88\x8A\t\x3"+
		"\x2\x2\x89\x88\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B"+
		"\x8C\x3\x2\x2\x2\x8C#\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x8F\a\"\x2\x2"+
		"\x8F%\x3\x2\x2\x2\x90\x95\x5(\x15\x2\x91\x92\a\x1D\x2\x2\x92\x94\x5(\x15"+
		"\x2\x93\x91\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x95\x96"+
		"\x3\x2\x2\x2\x96\'\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x9A\x5\f\a\x2\x99"+
		"\x9B\x5*\x16\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B)\x3\x2\x2"+
		"\x2\x9C\x9D\t\x4\x2\x2\x9D+\x3\x2\x2\x2\x9E\x9F\x5.\x18\x2\x9F-\x3\x2"+
		"\x2\x2\xA0\xA1\b\x18\x1\x2\xA1\xA7\x5\x30\x19\x2\xA2\xA3\a\x1F\x2\x2\xA3"+
		"\xA4\x5.\x18\x2\xA4\xA5\a \x2\x2\xA5\xA7\x3\x2\x2\x2\xA6\xA0\x3\x2\x2"+
		"\x2\xA6\xA2\x3\x2\x2\x2\xA7\xAD\x3\x2\x2\x2\xA8\xA9\f\x5\x2\x2\xA9\xAA"+
		"\a\x32\x2\x2\xAA\xAC\x5.\x18\x6\xAB\xA8\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2"+
		"\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE/\x3\x2\x2\x2\xAF\xAD\x3\x2"+
		"\x2\x2\xB0\xB1\x5\x34\x1B\x2\xB1\xB2\x5\x32\x1A\x2\xB2\xB3\x5\x34\x1B"+
		"\x2\xB3\x31\x3\x2\x2\x2\xB4\xB5\t\x5\x2\x2\xB5\x33\x3\x2\x2\x2\xB6\xBA"+
		"\x5\f\a\x2\xB7\xBA\x5\"\x12\x2\xB8\xBA\x5$\x13\x2\xB9\xB6\x3\x2\x2\x2"+
		"\xB9\xB7\x3\x2\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\x35\x3\x2\x2\x2\x14;>\x42"+
		"KQU\\\x63hp\x80\x82\x8B\x95\x9A\xA6\xAD\xB9";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace McKaySQLParser.Grammars
